import os
import time
from accounts.mail_tm import (
    get_first_domain, generate_email_password, create_account,
    get_token, wait_for_message, extract_magic_link_from_message, get_message_by_id
)
from apis.artbreeder import (
    request_magic_link, follow_magic_link_and_get_cookie,
    submit_realtime_job, download_image, get_remaining_credits
)
from utils import build_image_filename, random_proxy, log, load_config
from auth.auth_guard import check_key_online, get_device_id
import sys

# === CONFIG ===
PROMPTS_FILE = "data.txt"        
SAVE_DIR = "downloaded_images"   
BROWSER_TOKEN = "MTXFyddUTWQW5TGcdb9K"  
PROXIES = random_proxy("proxies.txt")                

# T√πy ch·ªçn l·ªçc mail ƒë·∫øn t·ª´ Artbreeder (kh√¥ng b·∫Øt bu·ªôc)
SENDER_CONTAINS = "noreply@artbreeder.com"
SUBJECT_CONTAINS = "Welcome to Artbreeder"  # ho·∫∑c "Verify" / "Magic" t√πy mail template

# Retry logic
MAX_JOB_RETRIES = 3
RELOGIN_ON_ERRORS = {401, 402, 403}


def ensure_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)


def read_prompts(path: str):
    with open(path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


def new_artbreeder_session(proxies=None):
    """
    T·∫°o email mail.tm + ƒëƒÉng nh·∫≠p b·∫±ng magic-link Artbreeder.
    Tr·∫£ v·ªÅ connect.sid (str) ho·∫∑c None n·∫øu l·ªói.
    """
    domain = get_first_domain(proxies)
    if not domain:
        log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c domain mail.tm", proxy=PROXIES)
        return None

    email, password = generate_email_password(domain)
    log("üìß Email m·ªõi:", email, proxy=PROXIES)

    if not create_account(email, password, proxies):
        log("‚ùå T·∫°o t√†i kho·∫£n mail.tm th·∫•t b·∫°i")
        return None

    token = get_token(email, password, proxies)
    if not token:
        log("‚ùå L·∫•y token mail.tm th·∫•t b·∫°i")
        return None

    if not request_magic_link(email, proxies=proxies):
        log("‚ùå G·ª≠i magic-link ƒë·∫øn Artbreeder th·∫•t b·∫°i", proxy=PROXIES)
        return None

    log("‚è≥ ƒê√£ y√™u c·∫ßu magic-link, ch·ªù mail v·ªÅ...", proxy=PROXIES)
    msg = wait_for_message(
        token,
        sender_contains=SENDER_CONTAINS,
        subject_contains=SUBJECT_CONTAINS,
        timeout_seconds=240,
        poll_interval=5,
        proxies=proxies
    )
    if not msg:
        log("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c email magic-link trong th·ªùi gian ch·ªù", proxy=PROXIES)
        return None

    # ensure l·∫•y full message (c√≥ html/text)
    full = get_message_by_id(token, msg.get("id"), proxies=proxies) or msg

    magic_link = extract_magic_link_from_message(full)
    if not magic_link:
        log("‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c magic-link t·ª´ mail", proxy=PROXIES)
        return None

    log("üîó Magic link:", magic_link, proxy=PROXIES)
    connect_sid = follow_magic_link_and_get_cookie(magic_link, proxies=proxies)
    if not connect_sid:
        log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c connect.sid sau khi m·ªü magic-link", proxy=PROXIES)
        return None

    log("‚úÖ Login cookies OK :.", connect_sid[:12] + "...", proxy=PROXIES)
    return connect_sid


def is_image_url_present(resp_json):
    return bool(isinstance(resp_json, dict) and resp_json.get("url"))


def need_relogin(resp_json):
    """
    Tr·∫£ v·ªÅ True n·∫øu response th·ªÉ hi·ªán l·ªói c·∫ßn re-login (401/402/403).
    """
    if not isinstance(resp_json, dict):
        return False
    code = resp_json.get("status")
    return code in RELOGIN_ON_ERRORS


def main():
    global PROXIES
    ensure_dir(SAVE_DIR)

    # T·∫°o phi√™n Artbreeder ban ƒë·∫ßu
    connect_sid = new_artbreeder_session(PROXIES)
    if not connect_sid:
        return
    
    credits = get_remaining_credits(connect_sid, proxies=PROXIES)
    if credits is not None:
        log(f"üí∞ Credits: {credits}", proxy=PROXIES)
    else:
        log("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c s·ªë credits", proxy=PROXIES)

    prompts = read_prompts(PROMPTS_FILE)
    total = len(prompts)
    if not total:
        log("‚ö†Ô∏è Kh√¥ng c√≥ prompt n√†o trong data.txt", proxy=PROXIES)
        return

    for i, prompt in enumerate(prompts, 1):
        log(f"[{i}/{total}] G·ª≠i req job...", proxy=PROXIES)
        attempt = 0

        while attempt < MAX_JOB_RETRIES:
            attempt += 1
            config = load_config()
            job_resp = submit_realtime_job(
                prompt=prompt,
                connect_sid=connect_sid,
                browser_token=BROWSER_TOKEN,
                model_version=config["model_version"],
                job_type=config["job_type"],
                width=config["width"],
                height=config["height"],
                strength=config["strength"],
                guidance_scale=config["guidance_scale"],
                num_steps=config["num_steps"],
                num_inference_steps=config["num_inference_steps"],
                proxies=PROXIES
            )


            # Th√†nh c√¥ng: c√≥ URL ·∫£nh
            if is_image_url_present(job_resp):
                image_url = job_resp["url"]
                filename = build_image_filename(i, prompt, ext="jpg", max_prompt_len=80)
                save_path = os.path.join(SAVE_DIR, filename)
                if download_image(image_url, save_path, PROXIES):
                    log(f"‚úì ƒê√£ t·∫£i: {filename}")
                else:
                    log("‚Äî T·∫£i ·∫£nh th·∫•t b·∫°i.")
                break  # xong prompt n√†y

            # In l·ªói chi ti·∫øt
            log("‚Äî Kh√¥ng th·∫•y image URL trong response:", job_resp)

            # L·ªói c·∫ßn re-login ‚Üí t·∫°o account m·ªõi & retry l·∫°i prompt
            if need_relogin(job_resp):
                code = job_resp.get("status")
                # ƒë·ªïi proxy m·ªõi
                new_proxy = random_proxy("proxies.txt")
                log(f"üîÅ G·∫∑p l·ªói {code} ‚Üí ƒë·ªïi proxy & t·∫°o t√†i kho·∫£n m·ªõi...", proxy=new_proxy)
                PROXIES = new_proxy
                connect_sid = new_artbreeder_session(PROXIES)
                if not connect_sid:
                    log("‚ùå Re-login th·∫•t b·∫°i. B·ªè qua prompt n√†y.", proxy=PROXIES)
                    break
                continue

            # Kh√¥ng ph·∫£i l·ªói re-login ‚Üí delay r·ªìi th·ª≠ l·∫°i
            time.sleep(2.0)
            if attempt < MAX_JOB_RETRIES:
                log("‚Üª Th·ª≠ l·∫°i...")
                continue
            else:
                log("‚è≠Ô∏è B·ªè qua prompt do l·ªói dai d·∫≥ng.")
                break

        # Ngh·ªâ nh·∫π tr√°nh rate-limit
        time.sleep(1.2)


API_URL = "http://62.171.131.164:5000"


def center_line(text, width=50):
    return text.center(width)

def print_box(info):
    box_width = 60
    print("‚ïî" + "‚ïê" * (box_width - 2) + "‚ïó")
    print("‚ïë" + center_line("üîê X√ÅC TH·ª∞C KEY TH√ÄNH C√îNG", box_width - 2) + "‚ïë")
    print("‚ï†" + "‚ïê" * (box_width - 2) + "‚ï£")
    print("‚ïë" + center_line(f"üîë KEY       : {info.get('key')}", box_width - 2) + "‚ïë")
    print("‚ïë" + center_line(f"üìÖ H·∫øt h·∫°n    : {info.get('expires')}", box_width - 2) + "‚ïë")
    print("‚ïë" + center_line(f"üîÅ S·ªë l∆∞·ª£t    : {info.get('remaining')}", box_width - 2) + "‚ïë")
    print("‚ï†" + "‚ïê" * (box_width - 2) + "‚ï£")
    print("‚ïë" + center_line("üß† Info dev @huyit32", box_width - 2) + "‚ïë")
    print("‚ïë" + center_line("üìß qhuy.dev@gmail.com", box_width - 2) + "‚ïë")
    print("‚ïö" + "‚ïê" * (box_width - 2) + "‚ïù")

if __name__ == "__main__":
    API_AUTH = f"{API_URL}/api/make_video_ai/auth"
    MAX_RETRIES = 5

    print("\nüìå X√ÅC TH·ª∞C KEY ƒê·ªÇ S·ª¨ D·ª§NG C√îNG C·ª§\n")

    for attempt in range(1, MAX_RETRIES + 1):
        key = input(f"üîë Nh·∫≠p API Key (L·∫ßn {attempt}/{MAX_RETRIES}): ").strip()
        success, message, info = check_key_online(key, API_AUTH)

        if success:
            print("\n‚úÖ " + message + "\n")
            print_box(info)
            print()

            run_now = input("‚ñ∂Ô∏è  B·∫°n c√≥ mu·ªën ch·∫°y ch∆∞∆°ng tr√¨nh ngay b√¢y gi·ªù kh√¥ng? (Y/n): ").strip().lower()
            if run_now in ("", "y", "yes"):
                main()
            else:
                print("‚úã B·∫°n ƒë√£ ch·ªçn kh√¥ng ch·∫°y ch∆∞∆°ng tr√¨nh. Tho√°t.")
            break
        else:
            print(f"\n‚ùå {message}")
            if attempt < MAX_RETRIES:
                print("‚Ü©Ô∏è  Vui l√≤ng th·ª≠ l·∫°i...\n")
                time.sleep(1)
            else:
                print("\nüö´ ƒê√£ nh·∫≠p sai qu√° 5 l·∫ßn. Tho√°t ch∆∞∆°ng tr√¨nh.")
                print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                print("üß† Info dev @huyit32 | üìß qhuy.dev@gmail.com")
                print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                sys.exit(1)

