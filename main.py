import os
import time
from accounts.mail_tm import (
    get_first_domain, generate_email_password, create_account,
    get_token, wait_for_message, extract_magic_link_from_message, get_message_by_id
)
from apis.artbreeder import (
    request_magic_link, follow_magic_link_and_get_cookie,
    submit_realtime_job, download_image
)
from utils import build_image_filename, random_proxy, log

# === CONFIG ===
PROMPTS_FILE = "data.txt"        
SAVE_DIR = "downloaded_images"   
BROWSER_TOKEN = "MTXFyddUTWQW5TGcdb9K"  
PROXIES = random_proxy("proxies.txt")                

# T√πy ch·ªçn l·ªçc mail ƒë·∫øn t·ª´ Artbreeder (kh√¥ng b·∫Øt bu·ªôc)
SENDER_CONTAINS = "noreply@artbreeder.com"
SUBJECT_CONTAINS = "Welcome to Artbreeder"  # ho·∫∑c "Verify" / "Magic" t√πy mail template


# Retry logic
MAX_JOB_RETRIES = 3
RELOGIN_ON_ERRORS = {401, 402, 403}

def ensure_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)

def read_prompts(path: str):
    with open(path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def new_artbreeder_session(proxies=None):
    """
    T·∫°o email mail.tm + ƒëƒÉng nh·∫≠p b·∫±ng magic-link Artbreeder.
    Tr·∫£ v·ªÅ connect.sid (str) ho·∫∑c None n·∫øu l·ªói.
    """
    domain = get_first_domain(proxies)
    if not domain:
        log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c domain mail.tm", proxy=PROXIES)
        return None

    email, password = generate_email_password(domain)
    log("üìß Email m·ªõi:", email, proxy=PROXIES)

    if not create_account(email, password, proxies):
        log("‚ùå T·∫°o t√†i kho·∫£n mail.tm th·∫•t b·∫°i")
        return None

    token = get_token(email, password, proxies)
    if not token:
        log("‚ùå L·∫•y token mail.tm th·∫•t b·∫°i")
        return None

    if not request_magic_link(email, proxies=proxies):
        log("‚ùå G·ª≠i magic-link ƒë·∫øn Artbreeder th·∫•t b·∫°i", proxy=PROXIES)
        return None

    log("‚è≥ ƒê√£ y√™u c·∫ßu magic-link, ch·ªù mail v·ªÅ...", proxy=PROXIES)
    msg = wait_for_message(
        token,
        sender_contains=SENDER_CONTAINS,
        subject_contains=SUBJECT_CONTAINS,
        timeout_seconds=240,
        poll_interval=5,
        proxies=proxies
    )
    if not msg:
        log("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c email magic-link trong th·ªùi gian ch·ªù", proxy=PROXIES)
        return None

    # ensure l·∫•y full message (c√≥ html/text)
    full = get_message_by_id(token, msg.get("id"), proxies=proxies) or msg

    magic_link = extract_magic_link_from_message(full)
    if not magic_link:
        log("‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c magic-link t·ª´ mail", proxy=PROXIES)
        return None

    log("üîó Magic link:", magic_link, proxy=PROXIES)
    connect_sid = follow_magic_link_and_get_cookie(magic_link, proxies=proxies)
    if not connect_sid:
        log("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c connect.sid sau khi m·ªü magic-link", proxy=PROXIES)
        return None

    log("‚úÖ ƒêƒÉng nh·∫≠p OK. connect.sid =", connect_sid[:12] + "...", proxy=PROXIES)
    return connect_sid

def is_image_url_present(resp_json):
    return bool(isinstance(resp_json, dict) and resp_json.get("url"))

def need_relogin(resp_json):
    """
    Tr·∫£ v·ªÅ True n·∫øu response th·ªÉ hi·ªán l·ªói c·∫ßn re-login (401/402/403).
    """
    if not isinstance(resp_json, dict):
        return False
    code = resp_json.get("status")
    return code in RELOGIN_ON_ERRORS

def main():
    global PROXIES
    ensure_dir(SAVE_DIR)

    # T·∫°o phi√™n Artbreeder ban ƒë·∫ßu
    connect_sid = new_artbreeder_session(PROXIES)
    if not connect_sid:
        return

    prompts = read_prompts(PROMPTS_FILE)
    total = len(prompts)
    if not total:
        log("‚ö†Ô∏è Kh√¥ng c√≥ prompt n√†o trong data.txt", proxy=PROXIES)
        return

    for i, prompt in enumerate(prompts, 1):
        log(f"[{i}/{total}] G·ª≠i req job...", proxy=PROXIES)
        attempt = 0

        while attempt < MAX_JOB_RETRIES:
            attempt += 1

            job_resp = submit_realtime_job(
                prompt=prompt,
                connect_sid=connect_sid,
                browser_token=BROWSER_TOKEN,
                model_version="flux-dev",
                job_type="img2img",   # ƒë·ªïi "txt2img" n·∫øu c·∫ßn
                width=1252,
                height=832,
                strength=1.0,
                guidance_scale=3.5,
                num_steps=30,
                num_inference_steps=28,
                proxies=PROXIES
            )

            # Th√†nh c√¥ng: c√≥ URL ·∫£nh
            if is_image_url_present(job_resp):
                image_url = job_resp["url"]
                filename = build_image_filename(i, prompt, ext="jpg", max_prompt_len=80)
                save_path = os.path.join(SAVE_DIR, filename)
                if download_image(image_url, save_path, PROXIES):
                    log(f"‚úì ƒê√£ t·∫£i: {filename}")
                else:
                    log("‚Äî T·∫£i ·∫£nh th·∫•t b·∫°i.")
                break  # xong prompt n√†y

            # In l·ªói chi ti·∫øt
            log("‚Äî Kh√¥ng th·∫•y image URL trong response:", job_resp)

            # L·ªói c·∫ßn re-login ‚Üí t·∫°o account m·ªõi & retry l·∫°i prompt
            if need_relogin(job_resp):
                code = job_resp.get("status")
                # ƒë·ªïi proxy m·ªõi
                new_proxy = random_proxy("proxies.txt")
                log(f"üîÅ G·∫∑p l·ªói {code} ‚Üí ƒë·ªïi proxy & t·∫°o t√†i kho·∫£n m·ªõi...", proxy=new_proxy)
                PROXIES = new_proxy
                connect_sid = new_artbreeder_session(PROXIES)
                if not connect_sid:
                    log("‚ùå Re-login th·∫•t b·∫°i. B·ªè qua prompt n√†y.", proxy=PROXIES)
                    break
                continue

            # Kh√¥ng ph·∫£i l·ªói re-login ‚Üí delay r·ªìi th·ª≠ l·∫°i
            time.sleep(2.0)
            if attempt < MAX_JOB_RETRIES:
                log("‚Üª Th·ª≠ l·∫°i...")
                continue
            else:
                log("‚è≠Ô∏è B·ªè qua prompt do l·ªói dai d·∫≥ng.")
                break

        # Ngh·ªâ nh·∫π tr√°nh rate-limit
        time.sleep(1.2)

if __name__ == "__main__":
    main()